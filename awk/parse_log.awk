# 26-Jul-2021
# Parses the log generated by test_QB.py under the analyze_estimates() function and extracts estimations of interest into a CSV file.
# Goal: use this process when the process did not end and the results could not be output to a CSV file as expected.

# Define variable that checks for the occurrence of the first simulation case
# NOTE: The default field separator is blank (whitespace)
BEGIN{firstcase=1}

/System:/ {
	# Get the values of rho for each server
	match($0, /rhos = (\[.*\])/, matches)
	rhos = "\"" matches[1] "\""
}

/Computing TRUE blocking probability/ {
	getline true_proba_line
	match(true_proba_line, /Pr\(K\)=([0-9\.]+%)/, matches)
	PrK = matches[1] / 100
}

/Running Fleming-Viot simulation/ {
	# Get the seed used in the simulation
	match($0, /seed=([0-9]+)/, matches)
	seed = matches[1]
}

/Simulation [0-9]+ of/ {
	# Retrieve the simulation case number
	match($0, /Simulation ([0-9]+) of/, matches)
	casenum = matches[1]

	# Read the execution parameters from the next line
	getline exec_params_line

	# Split the parameters which are separated by commas
	split(exec_params_line, params_list, ",")

	# Get the parameter value which are stored into a variable to be printed later
	if (firstcase) {
		param_names_string = "casenum,rhos,"
	}
	param_values_string = sprintf("%d,%s,", casenum, rhos)
	for (i in params_list) {
		# Parse the name-value pair of parameter values
		p = params_list[i]
		split(p, name_value_pair, "=")
		param_name = name_value_pair[1]
		param_value = name_value_pair[2]

		# Parse parameter names
		# (remove leading blanks (whitespace) in parameter names)
		sub(/^\s+/, "", param_name)
		
		# Parse parameter values
		if (param_name == "K") {
			K = param_value
		}
		if (param_name == "buffer_size_activation") {
			# Compute the proportion of the buffer size activation (J) of the queue's capacity
			# and add it to the parameter values string before the actual buffer size activation value
			buffer_size_activation_proportion = param_value / K
			param_values_string = param_values_string sprintf("%s,", buffer_size_activation_proportion)
		}

		# Add the value to the parameter values string
		param_values_string = param_values_string sprintf("%s,", param_value)

		# Add the name to the parameter names string (if this is the first occurrence of a simulation result)
		if (firstcase) {
			# Build up the parameter names string for the header
			
			# Rename parameters
			sub(/nparticles/, "N", param_name)
			sub(/buffer_size_activation/, "buffer_size_activation_value", param_name)
			sub(/#burn-in absorption cycles/, "burnin_cycles_absorption", param_name)

			if (param_name == "buffer_size_activation_value") {
				# Add the buffer size activation proportion to the parameter names string
				param_names_string = param_names_string "buffer_size_activation,"
			}

			# Output the parameter to the string of parameter names
			param_names_string = param_names_string sprintf("%s,", param_name)
		}
	}

	# Build the header containing the column names
	if (firstcase) {
		header = sprintf("%s%s,%s,%s,%s,%s,%s,%s,%s,%s",
						 param_names_string, "rep", "seed", "E(T)", "Pr(FV)", "Pr(K)", "time_fv_starts", "prop_time_fv_starts", "n(FV)", "time(FV)")
	}

	# Get ready for the output of simulation results which has many replications
	repnum = 0
}

/max time FV process starts =/ {
	# Retrieve the time at which the FV process starts
	match($0, /max time FV process starts = ([0-9\.]+) \(([0-9\.%]+)/, matches)
	time_fv_starts = matches[1]
	prop_time_fv_starts = sprintf("%f", matches[2]/100)
}

/estimated by FV/ {
	repnum++

	# Remove everything that is not part of a number
	gsub(/[^0-9\.%]/," ",$0)

	# Store the relevant result values
	ET = $1			# Expected survival time given starting absorbed state
	PrFV = $2/100	# Blocking probability (shown as percentage)
}

/FV simulation:/ {
	getline simulation_time_line
	match(simulation_time_line, /- time = ([0-9\.]+)/, matches)
	simulation_time = matches[1]
	
	getline nevents_line
	match(nevents_line, /- #events = ([0-9]+)/, matches)
	nevents = matches[1]
}

/Execution time MC \+ FV/ {	# This marks the end of the output for the current simulation case
	# Output header and record
	if (firstcase) {
		print header
		firstcase = 0
	}

	record = sprintf("%s%d,%d,%s,%g,%g,%s,%s,%d,%s",
					  param_values_string, repnum, seed, ET, PrFV, PrK, time_fv_starts, prop_time_fv_starts, nevents, simulation_time)
	print record
}
