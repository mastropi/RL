# -*- coding: utf-8 -*-
"""
Created on Wed Apr  4 18:44:23 2020

@author: Daniel Mastropietro
@description: Definition of classes defining agents.
Each agent is created with a policy and a learner class and implements the following methods:
    - getPolicy(): returns the Policy object of the agent. Note that the policy can be a dictionary of policies.
    - getLearner(): returns the Learner object of the agent. Note that the learner can be a dictionary of learners.
    - getLastAction(): returns the last action taken by the agent.
    - setLastAction(): sets the last action taken by the agent.
"""

# If below we use `import *` we get a warning generated by Spyder: "unable to detect undefined names"
# This is due to the fact that it doesn't know which modules are being imported, because they are not listed.
# It seems we can disable the warnings by adding the comment #NOQA but it doesn't work.
# Ref: https://stackoverflow.com/questions/50439309/spyder-ide-complaining-about-unable-to-detect-undefined-names
# where they actually also mention that it is a common pattern to do this import * in an __init__.py file!
#from .policies.random_walks import PolRandomWalkDiscrete
#from .learners.td_lambda import LeaTDLambda

class GenericAgent:
    """
    Class that holds the information of the policy, the learner, and the action associated to an agent

    These objects are very generic, they can be defined differently depending on the subclass.
    For instance the AgeQueue subclass defines policies and learners as dictionaries of policies and learners,
    respectively, because e.g. there are two policies at least that could be defined on a queue: the job acceptance
    policy, and the assignment policy of a job to a server in the queue.
    Likewise, the learner could contain two types of learners, the value functions learner and the policy learner.
    """

    # TODO: (2021/10/18) Probably we should define the attributes as `policies` and `learners` because the agent may have different policies and differen learners
    # (Ex: policy to accept a new incoming job, policy to assign a job to a server; learner for the state-value function, learner for the policy, etc.)
    def __init__(self, policy, learner):
        self.policy = policy
        self.learner = learner
        self.action = None

    def act(self, env, policy_type):
        raise NotImplementedError

    #----- GETTERS -----#
    def getPolicy(self):
        return self.policy

    def getLearner(self):
        return self.learner

    def getLastAction(self):
        "Returns the last action performed by the agent"
        return self.action

    #----- SETTERS -----#
    def setLastAction(self, action):
        self.action = action
